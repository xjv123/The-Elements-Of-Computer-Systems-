// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * y+y, y-y, y-y, 0, 1, -1, y, y, -y, -y, !y, !y,
 * y+1, y+1, y-1, y-1, y&y, y|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the y and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set y = 0        // 16-bit constant
// if (nx == 1) set y = !y       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = y + y  // integer 2's complement addition
// if (f == 0)  set out = y & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the y input?
        nx, // negate the y input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = y + y (if 1) or y & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   
   //zx
   Not(in=zx,out=not1);
   And(a=x[0],b=not1,out=zx0);
   And(a=x[1],b=not1,out=zx1);
   And(a=x[2],b=not1,out=zx2);
   And(a=x[3],b=not1,out=zx3);
   And(a=x[4],b=not1,out=zx4);
   And(a=x[5],b=not1,out=zx5);
   And(a=x[6],b=not1,out=zx6);
   And(a=x[7],b=not1,out=zx7);
   And(a=x[8],b=not1,out=zx8);
   And(a=x[9],b=not1,out=zx9);
   And(a=x[10],b=not1,out=zx10);
   And(a=x[11],b=not1,out=zx11);
   And(a=x[12],b=not1,out=zx12);
   And(a=x[13],b=not1,out=zx13);
   And(a=x[14],b=not1,out=zx14);
   And(a=x[15],b=not1,out=zx15);
   
   
   //nx

   Xor(a=zx0,b=nx,out=nx0);
   Xor(a=zx1,b=nx,out=nx1);  
   Xor(a=zx2,b=nx,out=nx2);  
   Xor(a=zx3,b=nx,out=nx3);  
   Xor(a=zx4,b=nx,out=nx4);  
   Xor(a=zx5,b=nx,out=nx5);  
   Xor(a=zx6,b=nx,out=nx6);  
   Xor(a=zx7,b=nx,out=nx7);  
   Xor(a=zx8,b=nx,out=nx8);  
   Xor(a=zx9,b=nx,out=nx9);  
   Xor(a=zx10,b=nx,out=nx10);  
   Xor(a=zx11,b=nx,out=nx11);  
   Xor(a=zx12,b=nx,out=nx12);  
   Xor(a=zx13,b=nx,out=nx13);  
   Xor(a=zx14,b=nx,out=nx14);  
   Xor(a=zx15,b=nx,out=nx15);  

   
   //zy
   
   Not(in=zy,out=not2);
   And(a=y[0],b=not2,out=zy0);
   And(a=y[1],b=not2,out=zy1);
   And(a=y[2],b=not2,out=zy2);
   And(a=y[3],b=not2,out=zy3);
   And(a=y[4],b=not2,out=zy4);
   And(a=y[5],b=not2,out=zy5);
   And(a=y[6],b=not2,out=zy6);
   And(a=y[7],b=not2,out=zy7);
   And(a=y[8],b=not2,out=zy8);
   And(a=y[9],b=not2,out=zy9);
   And(a=y[10],b=not2,out=zy10);
   And(a=y[11],b=not2,out=zy11);
   And(a=y[12],b=not2,out=zy12);
   And(a=y[13],b=not2,out=zy13);
   And(a=y[14],b=not2,out=zy14);
   And(a=y[15],b=not2,out=zy15);
   
   
   //ny
   
   Xor(a=zy0,b=ny,out=ny0);
   Xor(a=zy1,b=ny,out=ny1);
   Xor(a=zy2,b=ny,out=ny2);
   Xor(a=zy3,b=ny,out=ny3);
   Xor(a=zy4,b=ny,out=ny4);
   Xor(a=zy5,b=ny,out=ny5);
   Xor(a=zy6,b=ny,out=ny6);
   Xor(a=zy7,b=ny,out=ny7);
   Xor(a=zy8,b=ny,out=ny8);
   Xor(a=zy9,b=ny,out=ny9);
   Xor(a=zy10,b=ny,out=ny10);
   Xor(a=zy11,b=ny,out=ny11);
   Xor(a=zy12,b=ny,out=ny12);
   Xor(a=zy13,b=ny,out=ny13);
   Xor(a=zy14,b=ny,out=ny14);
   Xor(a=zy15,b=ny,out=ny15);
   
   
   //f
   Add16(a[0]=nx0,b[0]=ny0,out[0]=addOut0,
   a[1]=nx1,b[1]=ny1,out[1]=addOut1,
   a[2]=nx2,b[2]=ny2,out[2]=addOut2,
   a[3]=nx3,b[3]=ny3,out[3]=addOut3,
   a[4]=nx4,b[4]=ny4,out[4]=addOut4,
   a[5]=nx5,b[5]=ny5,out[5]=addOut5,
   a[6]=nx6,b[6]=ny6,out[6]=addOut6,
   a[7]=nx7,b[7]=ny7,out[7]=addOut7,
   a[8]=nx8,b[8]=ny8,out[8]=addOut8,
   a[9]=nx9,b[9]=ny9,out[9]=addOut9,
   a[10]=nx10,b[10]=ny10,out[10]=addOut10,
   a[11]=nx11,b[11]=ny11,out[11]=addOut11,
   a[12]=nx12,b[12]=ny12,out[12]=addOut12,
   a[13]=nx13,b[13]=ny13,out[13]=addOut13,
   a[14]=nx14,b[14]=ny14,out[14]=addOut14,
   a[15]=nx15,b[15]=ny15,out[15]=addOut15);
   
   
   And(a=nx0,b=ny0,out=andOut0);
   And(a=nx1,b=ny1,out=andOut1);
   And(a=nx2,b=ny2,out=andOut2);
   And(a=nx3,b=ny3,out=andOut3);
   And(a=nx4,b=ny4,out=andOut4);
   And(a=nx5,b=ny5,out=andOut5);
   And(a=nx6,b=ny6,out=andOut6);
   And(a=nx7,b=ny7,out=andOut7);
   And(a=nx8,b=ny8,out=andOut8);
   And(a=nx9,b=ny9,out=andOut9);
   And(a=nx10,b=ny10,out=andOut10);
   And(a=nx11,b=ny11,out=andOut11);
   And(a=nx12,b=ny12,out=andOut12);
   And(a=nx13,b=ny13,out=andOut13);
   And(a=nx14,b=ny14,out=andOut14);
   And(a=nx15,b=ny15,out=andOut15);
  
   
   Mux(a=andOut0,b=addOut0,sel=f,out=fOut0);
   Mux(a=andOut1,b=addOut1,sel=f,out=fOut1);
   Mux(a=andOut2,b=addOut2,sel=f,out=fOut2);
   Mux(a=andOut3,b=addOut3,sel=f,out=fOut3);
   Mux(a=andOut4,b=addOut4,sel=f,out=fOut4);
   Mux(a=andOut5,b=addOut5,sel=f,out=fOut5);
   Mux(a=andOut6,b=addOut6,sel=f,out=fOut6);
   Mux(a=andOut7,b=addOut7,sel=f,out=fOut7);
   Mux(a=andOut8,b=addOut8,sel=f,out=fOut8);
   Mux(a=andOut9,b=addOut9,sel=f,out=fOut9);
   Mux(a=andOut10,b=addOut10,sel=f,out=fOut10);
   Mux(a=andOut11,b=addOut11,sel=f,out=fOut11);
   Mux(a=andOut12,b=addOut12,sel=f,out=fOut12);
   Mux(a=andOut13,b=addOut13,sel=f,out=fOut13);
   Mux(a=andOut14,b=addOut14,sel=f,out=fOut14);
   Mux(a=andOut15,b=addOut15,sel=f,out=fOut15);
	
	
	//no
	
	Xor(a=fOut0,b=no,out=out[0]);
	Xor(a=fOut1,b=no,out=out[1]);
	Xor(a=fOut2,b=no,out=out[2]);
	Xor(a=fOut3,b=no,out=out[3]);
	Xor(a=fOut4,b=no,out=out[4]);
	Xor(a=fOut5,b=no,out=out[5]);
	Xor(a=fOut6,b=no,out=out[6]);
	Xor(a=fOut7,b=no,out=out[7]);
	Xor(a=fOut8,b=no,out=out[8]);
	Xor(a=fOut9,b=no,out=out[9]);
	Xor(a=fOut10,b=no,out=out[10]);
	Xor(a=fOut11,b=no,out=out[11]);
	Xor(a=fOut12,b=no,out=out[12]);
	Xor(a=fOut13,b=no,out=out[13]);
	Xor(a=fOut14,b=no,out=out[14]);
	Xor(a=fOut15,b=no,out=out[15]);
	
	
	//zr
	
	Xor(a=fOut0,b=no,out=out0);
	Xor(a=fOut1,b=no,out=out1);
	Xor(a=fOut2,b=no,out=out2);
	Xor(a=fOut3,b=no,out=out3);
	Xor(a=fOut4,b=no,out=out4);
	Xor(a=fOut5,b=no,out=out5);
	Xor(a=fOut6,b=no,out=out6);
	Xor(a=fOut7,b=no,out=out7);
	Xor(a=fOut8,b=no,out=out8);
	Xor(a=fOut9,b=no,out=out9);
	Xor(a=fOut10,b=no,out=out10);
	Xor(a=fOut11,b=no,out=out11);
	Xor(a=fOut12,b=no,out=out12);
	Xor(a=fOut13,b=no,out=out13);
	Xor(a=fOut14,b=no,out=out14);
	Xor(a=fOut15,b=no,out=out15);
	
	Not(in=out0,out=outs0);
	Not(in=out1,out=outs1);
	Not(in=out2,out=outs2);
	Not(in=out3,out=outs3);
	Not(in=out4,out=outs4);
	Not(in=out5,out=outs5);
	Not(in=out6,out=outs6);
	Not(in=out7,out=outs7);
	Not(in=out8,out=outs8);	
	Not(in=out9,out=outs9);
	Not(in=out10,out=outs10);
	Not(in=out11,out=outs11);
	Not(in=out12,out=outs12);
	Not(in=out13,out=outs13);
	Not(in=out14,out=outs14);
	Not(in=out15,out=outs15);
	
	
	And(a=outs0,b=outs1,out=outx1);
	And(a=outs2,b=outs3,out=outx2);
	And(a=outs4,b=outs5,out=outx3);
	And(a=outs6,b=outs7,out=outx4);
	And(a=outs8,b=outs9,out=outx5);
	And(a=outs10,b=outs11,out=outx6);
	And(a=outs12,b=outs13,out=outx7);
	And(a=outs14,b=outs15,out=outx8);
    
	And(a=outx1,b=outx2,out=outx9);
    And(a=outx3,b=outx4,out=outx10);
    And(a=outx5,b=outx6,out=outx11);
    And(a=outx7,b=outx8,out=outx12);
    
	And(a=outx9,b=outx10,out=outx13);
    And(a=outx11,b=outx12,out=outx14);
	
	And(a=outx13,b=outx14,out=zr);
	
	
	//ng
	
	And(a=out15,b=out15,out=ng);
   
   
}